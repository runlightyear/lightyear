"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[85511],{44987:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(22155);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},52208:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api/salesforce.fieldtype","title":"salesforce.fieldtype","description":"Home &gt; @runlightyear/salesforce &gt; FieldType","source":"@site/docs/api/salesforce.fieldtype.md","sourceDirName":"api","slug":"/api/salesforce.fieldtype","permalink":"/docs/api/salesforce.fieldtype","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var s=r(65723),a=r(44987);const i={},o=void 0,l={},c=[{value:"FieldType type",id:"fieldtype-type",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/api/",children:"Home"})," > ",(0,s.jsx)(n.a,{href:"/docs/api/salesforce",children:"@runlightyear/salesforce"})," > ",(0,s.jsx)(n.a,{href:"/docs/api/salesforce.fieldtype",children:"FieldType"})]}),"\n",(0,s.jsx)(n.h2,{id:"fieldtype-type",children:"FieldType type"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'type FieldType = \r\n/**\r\n * String values.\r\n */\r\n"string"\r\n/**\r\n * Boolean (true / false) values.\r\n */\r\n | "boolean"\r\n/**\r\n * Integer values.\r\n */\r\n | "int"\r\n/**\r\n * Double values.\r\n */\r\n | "double"\r\n/**\r\n * Date values.\r\n */\r\n | "date"\r\n/**\r\n * Date and time values.\r\n */\r\n | "datetime"\r\n/**\r\n * Base64-encoded arbitrary binary data (of type base64Binary). Used for Attachment, Document, and Scontrol objects.\r\n */\r\n | "base64"\r\n/**\r\n * Primary key field for the object. For information on IDs, see Field Types.\r\n */\r\n | "ID"\r\n/**\r\n *  Cross-references to a different object. Analogous to a foreign key field in SQL.\r\n */\r\n | "reference"\r\n/**\r\n * Currency values.\r\n */\r\n | "currency"\r\n/**\r\n * String that is displayed as a multiline text field.\r\n */\r\n | "textarea"\r\n/**\r\n * Percentage values.\r\n */\r\n | "percent"\r\n/**\r\n * Phone numbers. Values can include alphabetic characters. Client applications are responsible for phone number formatting.\r\n */\r\n | "phone"\r\n/**\r\n * URL values. Client applications should commonly display these as hyperlinks. If Field.extraTypeInfo is imageurl, the URL references an image, and can be displayed as an image instead.\r\n */\r\n | "url"\r\n/**\r\n * Email addresses.\r\n */\r\n | "email"\r\n/**\r\n * Comboboxes, which provide a set of enumerated values and allow the user to specify a value not in the list.\r\n */\r\n | "combobox"\r\n/**\r\n * Single-select picklists, which provide a set of enumerated values from which only one value can be selected.\r\n */\r\n | "picklist"\r\n/**\r\n * Multi-select picklists, which provide a set of enumerated values from which multiple values can be selected.\r\n */\r\n | "multipicklist"\r\n/**\r\n * Values can be any of these types: string, picklist, boolean, int, double, percent, ID, date, dateTime, url, or email.\r\n */\r\n | "anyType"\r\n/**\r\n * Geolocation values, including latitude and longitude, for custom geolocation fields on custom objects.\r\n */\r\n | "location";\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);