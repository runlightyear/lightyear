"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5804],{57522:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>m});var r=a(29901);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var c=r.createContext({}),p=function(e){var n=r.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},d=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(a),m=t,f=u["".concat(c,".").concat(m)]||u[m]||l[m]||i;return a?r.createElement(f,s(s({ref:n},d),{},{components:a})):r.createElement(f,s({ref:n},d))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:t,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},71410:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=a(14090),t=(a(29901),a(57522));const i={},s=void 0,o={unversionedId:"api/slack.slackscope",id:"api/slack.slackscope",title:"slack.slackscope",description:"Home &gt; @runlightyear/slack &gt; SlackScope",source:"@site/docs/api/slack.slackscope.md",sourceDirName:"api",slug:"/api/slack.slackscope",permalink:"/docs/api/slack.slackscope",draft:!1,tags:[],version:"current",frontMatter:{}},c={},p=[{value:"SlackScope type",id:"slackscope-type",level:2}],d={toc:p};function l(e){let{components:n,...a}=e;return(0,t.kt)("wrapper",(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,t.kt)("a",{parentName:"p",href:"/docs/api/slack"},"@runlightyear/slack")," ",">"," ",(0,t.kt)("a",{parentName:"p",href:"/docs/api/slack.slackscope"},"SlackScope")),(0,t.kt)("h2",{id:"slackscope-type"},"SlackScope type"),(0,t.kt)("b",null,"Signature:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-typescript"},'declare type SlackScope = \n/**\n * Administer a workspace\n */\n"admin"\n/**\n * Access analytics data about the organization\n *\n */\n | "admin.analytics:read"\n/**\n * View apps and app requests in a workspace\n */\n | "admin.apps:read"\n/**\n *  Manage apps in a workspace\n */\n | "admin.apps:write"\n/**\n *  Read information barriers in the organization\n */\n | "admin.barriers:read"\n/**\n * Manage information barriers in the organization\n */\n | "admin.barriers:write"\n/**\n *  View the channel\u2019s member list, topic, purpose and channel name\n */\n | "admin.conversations:read"\n/**\n *  Start a new conversation, modify a conversation and modify channel details\n */\n | "admin.conversations:write"\n/**\n * Gain information about invite requests in a Grid organization.\n */\n | "admin.invites:read"\n/**\n * Approve or deny invite requests in a Grid organization.\n */\n | "admin.invites:write"\n/**\n * Access information about a workspace\n */\n | "admin.teams:read"\n/**\n * Make changes to a workspace\n */\n | "admin.teams:write"\n/**\n * Access information about user groups\n */\n | "admin.usergroups:read"\n/**\n * Make changes to your usergroups\n */\n | "admin.usergroups:write"\n/**\n * Access a workspace\u2019s profile information\n */\n | "admin.users:read"\n/**\n * Modify account information\n */\n | "admin.users:write"\n/**\n * Read app configuration info via App Manifest APIs\n */\n | "app_configurations:read"\n/**\n * Write app configuration info and create apps via App Manifest APIs\n */\n | "app_configurations:write"\n/**\n * View messages that directly mention @your_slack_app in conversations that the app is in\n */\n | "app_mentions:read"\n/**\n * View events from all workspaces, channels and users (Enterprise Grid only)\n */\n | "auditlogs:read"\n/**\n * Grants permission to list authorizations associated with the Events API\n */\n | "authorizations:read"\n/**\n * List bookmarks\n */\n | "bookmarks:read"\n/**\n * Create, edit, and remove bookmarks\n */\n | "bookmarks:write"\n/**\n * Add the ability for people to direct message or mention @your_slack_app\n */\n | "bot"\n/**\n * View information about ongoing and past calls\n */\n | "calls:read"\n/**\n * Start and manage calls in a workspace\n */\n | "calls:write"\n/**\n * View messages and other content in public channels that your slack app has been added to\n */\n | "channels:history"\n/**\n * Join public channels in a workspace\n */\n | "channels:join"\n/**\n * Manage public channels that your slack app has been added to and create new ones\n */\n | "channels:manage"\n/**\n * View basic information about public channels in a workspace\n */\n | "channels:read"\n/**\n * Manage a user\u2019s public channels and create new ones on a user\u2019s behalf\n */\n | "channels:write"\n/**\n * Post messages in approved channels & conversations\n */\n | "chat:write"\n/**\n * Send messages as @your_slack_app with a customized username and avatar\n */\n | "chat:write.customize"\n/**\n * Send messages to channels @your_slack_app isn\'t a member of\n */\n | "chat:write.public"\n/**\n * Send messages as your slack app\n */\n | "chat:write:bot"\n/**\n * Send messages on a user\u2019s behalf\n */\n | "chat:write:user" | "commands" | "connections:write" | "conversations.connect:manage" | "conversations.connect:read" | "conversations.connect:write" | "dnd:read" | "dnd:write" | "dnd:write:user" | "email" | "emoji:read" | "files:read" | "files:write" | "files:write:user" | "groups:history" | "groups:read" | "groups:write" | "identify" | "identity.avatar" | "identity.avatar:read:user" | "identity.basic" | "identity.email" | "identity.email:read:user" | "identity.team" | "identity.team:read:user" | "identity:read:user" | "im:history" | "im:read" | "im:write" | "incoming-webhook" | "links.embed:write" | "links:read" | "links:write" | "metadata.message:read" | "mpim:history" | "mpim:read" | "mpim:write" | "openid" | "pins:read" | "pins:write" | "post" | "profile" | "reactions:read" | "reactions:write" | "read" | "reminders:read" | "reminders:read:user" | "reminders:write" | "reminders:write:user" | "remote_files:read" | "remote_files:share" | "remote_files:write" | "search:read" | "stars:read" | "stars:write" | "team.billing:read" | "team.preferences:read" | "team:read" | "tokens.basic" | "triggers:read" | "triggers:write" | "usergroups:read" | "usergroups:write" | "users.profile:read" | "users.profile:write" | "users.profile:write:user" | "users:read" | "users:read.email" | "users:write" | "workflow.steps:execute";\n')))}l.isMDXComponent=!0}}]);