"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[63584],{57522:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>m});var n=a(29901);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=p(a),m=l,g=u["".concat(i,".").concat(m)]||u[m]||c[m]||r;return a?n.createElement(g,o(o({ref:t},s),{},{components:a})):n.createElement(g,o({ref:t},s))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=u;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:l,o[1]=d;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},57629:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var n=a(14090),l=(a(29901),a(57522));const r={},o=void 0,d={unversionedId:"api/gcal.googlecalendar",id:"api/gcal.googlecalendar",title:"gcal.googlecalendar",description:"Home &gt; @runlightyear/gcal &gt; GoogleCalendar",source:"@site/docs/api/gcal.googlecalendar.md",sourceDirName:"api",slug:"/api/gcal.googlecalendar",permalink:"/docs/api/gcal.googlecalendar",draft:!1,tags:[],version:"current",frontMatter:{}},i={},p=[{value:"GoogleCalendar class",id:"googlecalendar-class",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2},{value:"Example 6",id:"example-6",level:2},{value:"Example 7",id:"example-7",level:2},{value:"Example 8",id:"example-8",level:2},{value:"Example 9",id:"example-9",level:2},{value:"Example 10",id:"example-10",level:2},{value:"Example 11",id:"example-11",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Calendar Methods",id:"calendar-methods",level:2},{value:"Event Methods",id:"event-methods",level:2},{value:"Listener Methods",id:"listener-methods",level:2},{value:"Notification Methods",id:"notification-methods",level:2},{value:"Other Methods",id:"other-methods",level:2}],s={toc:p};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/gcal"},"@runlightyear/gcal")," ",">"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/gcal.googlecalendar"},"GoogleCalendar")),(0,l.kt)("h2",{id:"googlecalendar-class"},"GoogleCalendar class"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"This API is in beta and may contain contain bugs. Can be used in production with caution.")),(0,l.kt)("p",null,"Google Calendar connector"),(0,l.kt)("b",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"declare class GoogleCalendar extends RestConnector \n")),(0,l.kt)("p",null,"Extends: "),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/api/lightyear.restconnector"},"RestConnector")),(0,l.kt)("h2",{id:"example-1"},"Example 1"),(0,l.kt)("p",null,"Create an event"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\nfunction addHours(date: Date, hours: number) {\n  return new Date(date.getTime() + hours * 60 * 60 * 1000);\n}\n\ndefineAction({\n  name: "createEvent",\n  title: "Create Event",\n  apps: ["gcal"],\n  variables: ["calendarId?", "summary"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const response = await gcal.createEvent({\n      calendarId: variables.calendarId || "primary",\n      event: {\n        summary: variables.summary!,\n        start: {\n          dateTime: addHours(new Date(), 1).toISOString(),\n        },\n        end: {\n          dateTime: addHours(new Date(), 2).toISOString(),\n        },\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-2"},"Example 2"),(0,l.kt)("p",null,"Create an event with attendees"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\nfunction addHours(date: Date, hours: number) {\n  return new Date(date.getTime() + hours * 60 * 60 * 1000);\n}\n\ndefineAction({\n  name: "createEventWithAttendees",\n  title: "Create Event with Attendees",\n  apps: ["gcal"],\n  variables: ["calendarId?", "summary", "attendees"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const attendees = variables.attendees!.split(",");\n\n    const response = await gcal.createEvent({\n      calendarId: variables.calendarId || "primary",\n      event: {\n        summary: variables.summary!,\n        start: {\n          dateTime: addHours(new Date(), 1).toISOString(),\n        },\n        end: {\n          dateTime: addHours(new Date(), 2).toISOString(),\n        },\n        attendees: attendees.map((email) => ({\n          email,\n        })),\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-3"},"Example 3"),(0,l.kt)("p",null,"Create an all-day event"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\nfunction tomorrow() {\n  const date = new Date();\n  date.setDate(date.getDate() + 1);\n  return date.toISOString().split("T")[0];\n}\n\ndefineAction({\n  name: "createAllDayEvent",\n  title: "Create All Day Event",\n  apps: ["gcal"],\n  variables: ["calendarId?", "summary"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const response = await gcal.createEvent({\n      calendarId: variables.calendarId || "primary",\n      event: {\n        summary: variables.summary!,\n        start: {\n          date: tomorrow(),\n        },\n        end: {\n          date: tomorrow(),\n        },\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-4"},"Example 4"),(0,l.kt)("p",null,"List upcoming events"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\nfunction addDays(date: Date, days: number) {\n  return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);\n}\n\ndefineAction({\n  name: "listUpcomingEvents",\n  title: "List Upcoming Events",\n  apps: ["gcal"],\n  variables: ["calendarId?"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const response = await gcal.listEvents({\n      calendarId: variables.calendarId || "primary",\n      timeMin: new Date().toISOString(),\n      timeMax: addDays(new Date(), 2).toISOString(),\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-5"},"Example 5"),(0,l.kt)("p",null,"Get an event"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\ndefineAction({\n  name: "getEvent",\n  title: "Get Event",\n  apps: ["gcal"],\n  variables: ["calendarId?", "eventId"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const response = await gcal.getEvent({\n      calendarId: variables.calendarId || "primary",\n      eventId: variables.eventId!,\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-6"},"Example 6"),(0,l.kt)("p",null,"Patch event summary"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\ndefineAction({\n  name: "patchEventSummary",\n  title: "Patch Event Summary",\n  apps: ["gcal"],\n  variables: ["calendarId?", "eventId", "summary"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const response = await gcal.patchEvent({\n      calendarId: variables.calendarId || "primary",\n      eventId: variables.eventId!,\n      event: {\n        summary: variables.summary!,\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-7"},"Example 7"),(0,l.kt)("p",null,"Patch event attendees"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\ndefineAction({\n  name: "addEventAttendee",\n  title: "Add Event Attendee",\n  apps: ["gcal"],\n  variables: ["calendarId?", "eventId", "attendee"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const getEventResponse = await gcal.getEvent({\n      calendarId: variables.calendarId || "primary",\n      eventId: variables.eventId!,\n    });\n\n    const event = getEventResponse.data;\n\n    const response = await gcal.patchEvent({\n      calendarId: variables.calendarId || "primary",\n      eventId: variables.eventId!,\n      event: {\n        attendees: [...event.attendees, { email: variables.attendee! }],\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-8"},"Example 8"),(0,l.kt)("p",null,"Update event"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\nfunction addHours(date: Date, hours: number) {\n  return new Date(date.getTime() + hours * 60 * 60 * 1000);\n}\n\ndefineAction({\n  name: "updateEvent",\n  title: "Update Event",\n  apps: ["gcal"],\n  variables: ["calendarId?", "eventId", "summary"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const response = await gcal.updateEvent({\n      calendarId: variables.calendarId || "primary",\n      eventId: variables.eventId!,\n      event: {\n        summary: variables.summary!,\n        start: {\n          dateTime: addHours(new Date(), 2).toISOString(),\n        },\n        end: {\n          dateTime: addHours(new Date(), 3).toISOString(),\n        },\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-9"},"Example 9"),(0,l.kt)("p",null,"Delete event"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\ndefineAction({\n  name: "deleteEvent",\n  title: "Delete Event",\n  apps: ["gcal"],\n  variables: ["calendarId?", "eventId"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const response = await gcal.deleteEvent({\n      calendarId: variables.calendarId || "primary",\n      eventId: variables.eventId!,\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-10"},"Example 10"),(0,l.kt)("p",null,"On new events"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { GoogleCalendar } from "@runlightyear/gcal";\n\nGoogleCalendar.onNewEvents({\n  name: "onNewEvents",\n  title: "On New Events",\n  run: async ({ data }) => {\n    console.info("New events", data);\n  },\n});\n')),(0,l.kt)("h2",{id:"example-11"},"Example 11"),(0,l.kt)("p",null,"On new and updated events"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { GoogleCalendar } from "@runlightyear/gcal";\n\nGoogleCalendar.onNewAndUpdatedEvents({\n  name: "onNewAndUpdatedEvents",\n  title: "On New and Updated Events",\n  run: async ({ data }) => {\n    console.info("New and updated events", data);\n  },\n});\n')),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Constructor"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar._constructor_"},"(constructor)(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Constructs a new instance of the ",(0,l.kt)("code",null,"GoogleCalendar")," class")))),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.authtype"},"authType")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"static")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/lightyear.authtype"},"AuthType")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.oauth"},"OAuth")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"static")),(0,l.kt)("td",{parentName:"tr",align:null},"typeof ",(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendaroauth"},"GoogleCalendarOAuth")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)")))))),(0,l.kt)("h2",{id:"calendar-methods"},"Calendar Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.createcalendar"},"createCalendar(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Creates a secondary calendar.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.listcalendars"},"listCalendars(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Returns the calendars on the user's calendar list.")))),(0,l.kt)("h2",{id:"event-methods"},"Event Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.createevent"},"createEvent(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Creates an event.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.deleteevent"},"deleteEvent(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Deletes an event.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.getevent"},"getEvent(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Get an event.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.listevents"},"listEvents(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Returns events on the specified calendar.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.patchevent"},"patchEvent(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Patch an event.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.updateevent"},"updateEvent(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Updates an event. This method does not support patch semantics and always updates the entire event resource. To do a partial update, perform a get followed by an update using etags to ensure atomicity.")))),(0,l.kt)("h2",{id:"listener-methods"},"Listener Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.onnewandupdatedevents"},"onNewAndUpdatedEvents(props)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"static")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," On new and updated events")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.onnewevents"},"onNewEvents(props)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"static")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," On new events")))),(0,l.kt)("h2",{id:"notification-methods"},"Notification Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.stopchannel"},"stopChannel(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Stop notification channel")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.watchevents"},"watchEvents(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Watch for events.")))),(0,l.kt)("h2",{id:"other-methods"},"Other Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.defineeventswebhook"},"defineEventsWebhook(props)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("code",null,"static")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Low level interface to define an event webhook.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/gcal.googlecalendar.getbaseurl"},"getBaseUrl()")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)")))))))}c.isMDXComponent=!0}}]);