"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[38675],{62757:(e,n,t)=>{t.d(n,{xA:()=>i,yg:()=>m});var a=t(67308);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var g=a.createContext({}),p=function(e){var n=a.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},i=function(e){var n=p(e.components);return a.createElement(g.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,g=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,m=u["".concat(g,".").concat(d)]||u[d]||h[d]||s;return t?a.createElement(m,l(l({ref:n},i),{},{components:t})):a.createElement(m,l({ref:n},i))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=d;var o={};for(var g in n)hasOwnProperty.call(n,g)&&(o[g]=n[g]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<s;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},27415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=t(94790),r=(t(67308),t(62757));const s={},l=void 0,o={unversionedId:"api/gsheets.googlesheets",id:"api/gsheets.googlesheets",title:"gsheets.googlesheets",description:"Home &gt; @runlightyear/gsheets &gt; GoogleSheets",source:"@site/docs/api/gsheets.googlesheets.md",sourceDirName:"api",slug:"/api/gsheets.googlesheets",permalink:"/docs/api/gsheets.googlesheets",draft:!1,tags:[],version:"current",frontMatter:{}},g={},p=[{value:"GoogleSheets class",id:"googlesheets-class",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2},{value:"Example 6",id:"example-6",level:2},{value:"Example 7",id:"example-7",level:2},{value:"Example 8",id:"example-8",level:2},{value:"Example 9",id:"example-9",level:2},{value:"Example 10",id:"example-10",level:2},{value:"Example 11",id:"example-11",level:2},{value:"Example 12",id:"example-12",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Listener Methods",id:"listener-methods",level:2},{value:"Spreadsheet Methods",id:"spreadsheet-methods",level:2},{value:"Value Methods",id:"value-methods",level:2},{value:"Other Methods",id:"other-methods",level:2}],i={toc:p},u="wrapper";function h(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,r.yg)("a",{parentName:"p",href:"/docs/api/gsheets"},"@runlightyear/gsheets")," ",">"," ",(0,r.yg)("a",{parentName:"p",href:"/docs/api/gsheets.googlesheets"},"GoogleSheets")),(0,r.yg)("h2",{id:"googlesheets-class"},"GoogleSheets class"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"This API is in beta and may contain contain bugs. Can be used in production with caution.")),(0,r.yg)("p",null,"Google Sheets Connector"),(0,r.yg)("b",null,"Signature:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"declare class GoogleSheets extends RestConnector \n")),(0,r.yg)("p",null,"Extends: "),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/api/lightyear.restconnector"},"RestConnector")),(0,r.yg)("h2",{id:"example-1"},"Example 1"),(0,r.yg)("p",null,"Create a spreadsheet"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\ndefineAction({\n  name: "createSpreadsheet",\n  title: "Create Spreadsheet",\n  apps: ["gsheets"],\n  variables: ["title"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n\n    const response = await gsheets.createSpreadsheet({\n      title: variables.title!,\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-2"},"Example 2"),(0,r.yg)("p",null,"Get a row"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\ndefineAction({\n  name: "getRow",\n  title: "Get Row",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n\n    const response = await gsheets.getValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: "1:1",\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-3"},"Example 3"),(0,r.yg)("p",null,"Get a column"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\ndefineAction({\n  name: "getColumn",\n  title: "Get Column",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n\n    const response = await gsheets.getValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: "A:A",\n      majorDimension: "COLUMNS",\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-4"},"Example 4"),(0,r.yg)("p",null,"Get all rows and columns"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\ndefineAction({\n  name: "getAllRowsAndColumns",\n  title: "Get All Rows And Columns",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId", "worksheetName"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n\n    const response = await gsheets.getValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: `${variables.worksheetName!}`,\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-5"},"Example 5"),(0,r.yg)("p",null,"Append a row"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\ndefineAction({\n  name: "appendRow",\n  title: "Append Row",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n    const response = await gsheets.appendValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: "1:1",\n      valueInputOption: "RAW",\n      valueRange: {\n        range: "1:1",\n        values: [[1, 2, 3]],\n      },\n    });\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-6"},"Example 6"),(0,r.yg)("p",null,"Append multiple rows"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\ndefineAction({\n  name: "appendRow",\n  title: "Append Row",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n    const response = await gsheets.appendValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: "1:1",\n      valueInputOption: "RAW",\n      valueRange: {\n        range: "1:1",\n        values: [[1, 2, 3]],\n      },\n    });\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-7"},"Example 7"),(0,r.yg)("p",null,"Update a row"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\nfunction randomNumber() {\n  return Math.floor(Math.random() * 10);\n}\n\ndefineAction({\n  name: "updateRow",\n  title: "Update Row",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n\n    const response = await gsheets.updateValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: "1:1",\n      valueInputOption: "RAW",\n      valueRange: {\n        range: "1:1",\n        majorDimension: "ROWS",\n        values: [[randomNumber(), randomNumber(), randomNumber()]],\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-8"},"Example 8"),(0,r.yg)("p",null,"Update a column"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\nfunction randomNumber() {\n  return Math.floor(Math.random() * 10);\n}\n\ndefineAction({\n  name: "updateColumn",\n  title: "Update Column",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n\n    const response = await gsheets.updateValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: "A:A",\n      valueInputOption: "RAW",\n      valueRange: {\n        range: "A:A",\n        majorDimension: "COLUMNS",\n        values: [[randomNumber(), randomNumber(), randomNumber()]],\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-9"},"Example 9"),(0,r.yg)("p",null,"Update rows and columns"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\ndefineAction({\n  name: "updateRowsAndColumns",\n  title: "Update Rows and Columns",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n\n    const response = await gsheets.updateValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: "A1:C3",\n      valueInputOption: "RAW",\n      valueRange: {\n        range: "A1:C3",\n        majorDimension: "ROWS",\n        values: [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-10"},"Example 10"),(0,r.yg)("p",null,"Clear a row"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\ndefineAction({\n  name: "clearRow",\n  title: "Clear Row",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n\n    const response = await gsheets.clearValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: "1:1",\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-11"},"Example 11"),(0,r.yg)("p",null,"Clear a column"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleSheets } from "@runlightyear/gsheets";\n\ndefineAction({\n  name: "clearColumn",\n  title: "Clear Column",\n  apps: ["gsheets"],\n  variables: ["spreadsheetId"],\n  run: async ({ auths, variables }) => {\n    const gsheets = new GoogleSheets({\n      auth: auths.gsheets,\n    });\n\n    const response = await gsheets.clearValues({\n      spreadsheetId: variables.spreadsheetId!,\n      range: "A:A",\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-12"},"Example 12"),(0,r.yg)("p",null,"On new rows"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { GoogleSheets } from "@runlightyear/gsheets";\n\nGoogleSheets.onNewRows({\n  name: "onNewRows",\n  title: "On New Rows",\n  apps: ["gsheets"],\n  pollingFrequency: 1,\n  run: async ({ data }) => {\n    console.log("Data: ", data);\n  },\n});\n')),(0,r.yg)("h2",{id:"constructors"},"Constructors"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Constructor"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets._constructor_"},"(constructor)(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)"))," Constructs a new instance of the ",(0,r.yg)("code",null,"GoogleSheets")," class")))),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets.authtype"},"authType")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("code",null,"static")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/lightyear.authtype"},"AuthType")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets.oauth"},"OAuth")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("code",null,"static")),(0,r.yg)("td",{parentName:"tr",align:null},"typeof ",(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheetsoauth"},"GoogleSheetsOAuth")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)")))))),(0,r.yg)("h2",{id:"listener-methods"},"Listener Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets.onnewrows"},"onNewRows(props)")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("code",null,"static")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)"))," On new rows in a spreadsheet.")))),(0,r.yg)("h2",{id:"spreadsheet-methods"},"Spreadsheet Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets.createspreadsheet"},"createSpreadsheet(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)"))," Creates a spreadsheet, returning the newly created spreadsheet.")))),(0,r.yg)("h2",{id:"value-methods"},"Value Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets.appendvalues"},"appendValues(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)"))," Appends values to a spreadsheet.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets.clearvalues"},"clearValues(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)"))," Clear values from a spreadsheet.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets.getvalues"},"getValues(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)"))," Returns a range of values from a spreadsheet.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets.updatevalues"},"updateValues(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)"))," Sets values in a range of a spreadsheet.")))),(0,r.yg)("h2",{id:"other-methods"},"Other Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/gsheets.googlesheets.getbaseurl"},"getBaseUrl()")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("b",null,(0,r.yg)("i",null,"(BETA)")))))))}h.isMDXComponent=!0}}]);