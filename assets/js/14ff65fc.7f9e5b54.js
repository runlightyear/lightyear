"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[54901],{57522:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>d});var a=n(29901);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},i=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,k=u["".concat(p,".").concat(d)]||u[d]||m[d]||s;return n?a.createElement(k,o(o({ref:t},i),{},{components:n})):a.createElement(k,o({ref:t},i))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},64704:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(14090),r=(n(29901),n(57522));const s={},o=void 0,l={unversionedId:"api/slack.slack.postmessage",id:"api/slack.slack.postmessage",title:"slack.slack.postmessage",description:"Home &gt; @runlightyear/slack &gt; Slack &gt; postMessage",source:"@site/docs/api/slack.slack.postmessage.md",sourceDirName:"api",slug:"/api/slack.slack.postmessage",permalink:"/docs/api/slack.slack.postmessage",draft:!1,tags:[],version:"current",frontMatter:{}},p={},c=[{value:"Slack.postMessage() method",id:"slackpostmessage-method",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],i={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/slack"},"@runlightyear/slack")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/slack.slack"},"Slack")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/slack.slack.postmessage"},"postMessage")),(0,r.kt)("h2",{id:"slackpostmessage-method"},"Slack.postMessage() method"),(0,r.kt)("p",null,"Sends a message to a channel"),(0,r.kt)("b",null,"Signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"postMessage(props: PostMessageProps): Promise<HttpProxyResponse>;\n")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.postmessageprops"},"PostMessageProps")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("b",null,"Returns:"),(0,r.kt)("p",null,"Promise","<",(0,r.kt)("a",{parentName:"p",href:"/docs/api/lightyear.httpproxyresponse"},"HttpProxyResponse"),">"),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("p",null,"Post text message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "postMessage",\n  title: "Post Message",\n  apps: ["slack"],\n  variables: [\n    {\n      name: "channel",\n      description:\n        "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.",\n    },\n    {\n      name: "text",\n      description: "The formatted text of the message to be published.",\n    },\n  ],\n  run: async ({ auths, variables }) => {\n    const slack = new Slack({\n      auth: auths.slack,\n    });\n    const response = await slack.postMessage({\n      channel: variables.channel!,\n      text: variables.text!,\n    });\n    console.log("Response data: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("p",null,"Post message with blocks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "postMessageWithBlocks",\n  title: "Post Message With Blocks",\n  apps: ["slack"],\n  variables: [\n    {\n      name: "channel",\n      description:\n        "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.",\n    },\n  ],\n  run: async ({ auths, variables }) => {\n    const slack = new Slack({ auth: auths.slack });\n\n    const response = await slack.postMessage({\n      channel: variables.channel!,\n      blocks: [\n        {\n          type: "header",\n          text: {\n            type: "plain_text",\n            text: "The header of the message",\n          },\n        },\n        {\n          type: "section",\n          text: {\n            type: "mrkdwn",\n            text: "A message *with some bold text* and _some italicized text_.",\n          },\n        },\n        {\n          type: "divider",\n        },\n        {\n          type: "section",\n          fields: [\n            {\n              type: "mrkdwn",\n              text: "*Priority*\\nHigh",\n            },\n            {\n              type: "mrkdwn",\n              text: "*Assignee*\\nJohn",\n            },\n            {\n              type: "mrkdwn",\n              text: "*Labels*\\nBug",\n            },\n            {\n              type: "mrkdwn",\n              text: "*Milestone*\\nRelease 1.0",\n            },\n          ],\n        },\n      ],\n      text: "Text for screens where blocks are not supported.",\n    });\n\n    console.log("Response data: ", response.data);\n  },\n});\n')))}m.isMDXComponent=!0}}]);