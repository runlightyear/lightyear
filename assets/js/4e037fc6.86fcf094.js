"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[52929],{57522:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(29901);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=n.createContext({}),s=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(a),u=l,k=d["".concat(i,".").concat(u)]||d[u]||c[u]||r;return a?n.createElement(k,o(o({ref:t},m),{},{components:a})):n.createElement(k,o({ref:t},m))}));function u(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:l,o[1]=p;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},38760:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=a(14090),l=(a(29901),a(57522));const r={},o=void 0,p={unversionedId:"api/openai.openai",id:"api/openai.openai",title:"openai.openai",description:"Home &gt; @runlightyear/openai &gt; OpenAI",source:"@site/docs/api/openai.openai.md",sourceDirName:"api",slug:"/api/openai.openai",permalink:"/docs/api/openai.openai",draft:!1,tags:[],version:"current",frontMatter:{}},i={},s=[{value:"OpenAI class",id:"openai-class",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2},{value:"Example 6",id:"example-6",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Chat Methods",id:"chat-methods",level:2},{value:"Completions Methods",id:"completions-methods",level:2},{value:"Images Methods",id:"images-methods",level:2},{value:"Models Methods",id:"models-methods",level:2},{value:"Other Methods",id:"other-methods",level:2}],m={toc:s};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/openai"},"@runlightyear/openai")," ",">"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/openai.openai"},"OpenAI")),(0,l.kt)("h2",{id:"openai-class"},"OpenAI class"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"This API is in beta and may contain contain bugs. Can be used in production with caution.")),(0,l.kt)("p",null,"Connector to the OpenAI API"),(0,l.kt)("b",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"declare class OpenAI extends RestConnector \n")),(0,l.kt)("p",null,"Extends: "),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/api/lightyear.restconnector"},"RestConnector")),(0,l.kt)("h2",{id:"example-1"},"Example 1"),(0,l.kt)("p",null,"Import"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'import { OpenAI } from "@runlightyear/openAI"\n')),(0,l.kt)("h2",{id:"example-2"},"Example 2"),(0,l.kt)("p",null,"Use in an action"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'defineAction({\n  name: "openAIExample",\n  title: "OpenAI Example"\n  apps: ["openai"],\n  run: async ({ auths }) => {\n    const openai = new OpenAI({ auth: auths.openai });\n  }\n}\n')),(0,l.kt)("h2",{id:"example-3"},"Example 3"),(0,l.kt)("p",null,"List models"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const result = await openai.listModels();\nconst models = result.data.data;\nconsole.log("Model ids: ", models.map((model) => model.id).join(", "));\n')),(0,l.kt)("h2",{id:"example-4"},"Example 4"),(0,l.kt)("p",null,"Create a completion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const result = await openai.createCompletion({\n  model: "text-davinci-003",\n  prompt: "Say this is a test",\n  maxTokens: 7,\n  temperature: 0,\n});\nconst choice = result.data.choices[0];\nconst completion = choice.text;\nconsole.log("Completion: ", completion);\n')),(0,l.kt)("h2",{id:"example-5"},"Example 5"),(0,l.kt)("p",null,"Create a chat completion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const result = await openai.createChatCompletion({\n  model: "gpt-3.5-turbo",\n  messages: [\n    {\n      role: "system",\n      content: "You are a helpful assistant.",\n    },\n    {\n      role: "user",\n      content: "Hello!",\n    },\n  ],\n});\nconst choice = result.data.choices[0];\nconst completion = choice.message.content;\nconsole.log("Completion: ", completion);\n')),(0,l.kt)("h2",{id:"example-6"},"Example 6"),(0,l.kt)("p",null,"Create an image"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const result = await openai.createImage({\n  prompt: "A cute baby sea otter",\n  n: 2,\n  size: "1024x1024",\n});\nconst images = result.data.data;\nconsole.log("Url: ", images[0].url);\n')),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Constructor"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/openai.openai._constructor_"},"(constructor)(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Constructs a new instance of the ",(0,l.kt)("code",null,"OpenAI")," class")))),(0,l.kt)("h2",{id:"chat-methods"},"Chat Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/openai.openai.createchatcompletion"},"createChatCompletion(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Given a chat conversation, the model will return a chat completion response.")))),(0,l.kt)("h2",{id:"completions-methods"},"Completions Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/openai.openai.createcompletion"},"createCompletion(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.")))),(0,l.kt)("h2",{id:"images-methods"},"Images Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/openai.openai.createimage"},"createImage(props)")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," Given a prompt and/or an input image, the model will generate a new image.")))),(0,l.kt)("h2",{id:"models-methods"},"Models Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/openai.openai.listmodels"},"listModels()")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)"))," List and describe the various models available in the API. You can refer to the Models documentation to understand what models are available and the differences between them.")))),(0,l.kt)("h2",{id:"other-methods"},"Other Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/openai.openai.getbaseurl"},"getBaseUrl()")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("b",null,(0,l.kt)("i",null,"(BETA)")))))))}c.isMDXComponent=!0}}]);