"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[61252],{62757:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>h});var a=t(67308);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),p=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return a.createElement(u.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),g=p(t),m=r,h=g["".concat(u,".").concat(m)]||g[m]||c[m]||s;return t?a.createElement(h,i(i({ref:n},l),{},{components:t})):a.createElement(h,i({ref:n},l))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[g]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},10091:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=t(94790),r=(t(67308),t(62757));const s={},i=void 0,o={unversionedId:"api/github.github.updateissue",id:"api/github.github.updateissue",title:"github.github.updateissue",description:"Home &gt; @runlightyear/github &gt; GitHub &gt; updateIssue",source:"@site/docs/api/github.github.updateissue.md",sourceDirName:"api",slug:"/api/github.github.updateissue",permalink:"/docs/api/github.github.updateissue",draft:!1,tags:[],version:"current",frontMatter:{}},u={},p=[{value:"GitHub.updateIssue() method",id:"githubupdateissue-method",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2}],l={toc:p},g="wrapper";function c(e){let{components:n,...t}=e;return(0,r.yg)(g,(0,a.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,r.yg)("a",{parentName:"p",href:"/docs/api/github"},"@runlightyear/github")," ",">"," ",(0,r.yg)("a",{parentName:"p",href:"/docs/api/github.github"},"GitHub")," ",">"," ",(0,r.yg)("a",{parentName:"p",href:"/docs/api/github.github.updateissue"},"updateIssue")),(0,r.yg)("h2",{id:"githubupdateissue-method"},"GitHub.updateIssue() method"),(0,r.yg)("p",null,"Update an issue"),(0,r.yg)("b",null,"Signature:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"updateIssue(props: UpdateIssueProps): Promise<HttpProxyResponse>;\n")),(0,r.yg)("h2",{id:"parameters"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"props"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/github.updateissueprops"},"UpdateIssueProps")),(0,r.yg)("td",{parentName:"tr",align:null},"props")))),(0,r.yg)("b",null,"Returns:"),(0,r.yg)("p",null,"Promise","<",(0,r.yg)("a",{parentName:"p",href:"/docs/api/lightyear.httpproxyresponse"},"HttpProxyResponse"),">"),(0,r.yg)("h2",{id:"example-1"},"Example 1"),(0,r.yg)("p",null,"Assign an issue"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GitHub } from "@runlightyear/github";\n\ndefineAction({\n  name: "assignIssue",\n  title: "Assign Issue",\n  apps: ["github"],\n  variables: [\n    {\n      name: "owner",\n      description:\n        "The account owner of the repository. The name is not case sensitive.",\n    },\n    {\n      name: "repo",\n      description:\n        "The name of the repository without the .git extension. The name is not case sensitive.",\n    },\n    "issueNumber",\n    "assignee",\n  ],\n  run: async ({ auths, variables }) => {\n    const github = new GitHub({\n      auth: auths.github,\n    });\n    const result = await github.updateIssue({\n      owner: variables.owner!,\n      repo: variables.repo!,\n      issueNumber: parseInt(variables.issueNumber!),\n      assignees: [variables.assignee!],\n    });\n    console.log("Issue: ", result.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-2"},"Example 2"),(0,r.yg)("p",null,"Label an issue"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GitHub } from "@runlightyear/github";\n\ndefineAction({\n  name: "labelIssue",\n  title: "Label Issue",\n  apps: ["github"],\n  variables: [\n    {\n      name: "owner",\n      description:\n        "The account owner of the repository. The name is not case sensitive.",\n    },\n    {\n      name: "repo",\n      description:\n        "The name of the repository without the .git extension. The name is not case sensitive.",\n    },\n    "issueNumber",\n    "label",\n  ],\n  run: async ({ auths, variables }) => {\n    const github = new GitHub({\n      auth: auths.github,\n    });\n    const response = await github.updateIssue({\n      owner: variables.owner!,\n      repo: variables.repo!,\n      issueNumber: parseInt(variables.issueNumber!),\n      labels: [variables.label!],\n    });\n    console.log("Response: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-3"},"Example 3"),(0,r.yg)("p",null,"Complete an issue"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GitHub } from "@runlightyear/github";\n\ndefineAction({\n  name: "completeIssue",\n  title: "Complete Issue",\n  apps: ["github"],\n  variables: [\n    {\n      name: "owner",\n      description:\n        "The account owner of the repository. The name is not case sensitive.",\n    },\n    {\n      name: "repo",\n      description:\n        "The name of the repository without the .git extension. The name is not case sensitive.",\n    },\n    "issueNumber",\n  ],\n  run: async ({ auths, variables }) => {\n    const github = new GitHub({\n      auth: auths.github,\n    });\n    const response = await github.updateIssue({\n      owner: variables.owner!,\n      repo: variables.repo!,\n      issueNumber: parseInt(variables.issueNumber!),\n      state: "closed",\n      stateReason: "completed",\n    });\n    console.log("Response: ", response.data);\n  },\n});\n')))}c.isMDXComponent=!0}}]);