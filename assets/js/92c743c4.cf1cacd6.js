"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41015],{57522:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(29901);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),s=i(a),m=r,g=s["".concat(c,".").concat(m)]||s[m]||u[m]||o;return a?n.createElement(g,l(l({ref:t},d),{},{components:a})):n.createElement(g,l({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=s;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var i=2;i<o;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},94660:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var n=a(14090),r=(a(29901),a(57522));const o={},l=void 0,p={unversionedId:"api/gcal.googlecalendar.updateevent",id:"api/gcal.googlecalendar.updateevent",title:"gcal.googlecalendar.updateevent",description:"Home &gt; @runlightyear/gcal &gt; GoogleCalendar &gt; updateEvent",source:"@site/docs/api/gcal.googlecalendar.updateevent.md",sourceDirName:"api",slug:"/api/gcal.googlecalendar.updateevent",permalink:"/docs/api/gcal.googlecalendar.updateevent",draft:!1,tags:[],version:"current",frontMatter:{}},c={},i=[{value:"GoogleCalendar.updateEvent() method",id:"googlecalendarupdateevent-method",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2}],d={toc:i};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/gcal"},"@runlightyear/gcal")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/gcal.googlecalendar"},"GoogleCalendar")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/gcal.googlecalendar.updateevent"},"updateEvent")),(0,r.kt)("h2",{id:"googlecalendarupdateevent-method"},"GoogleCalendar.updateEvent() method"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This API is in beta and may contain contain bugs. Can be used in production with caution.")),(0,r.kt)("p",null,"Updates an event. This method does not support patch semantics and always updates the entire event resource. To do a partial update, perform a get followed by an update using etags to ensure atomicity."),(0,r.kt)("b",null,"Signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"updateEvent(props: UpdateEventProps): Promise<UpdateEventResponse>;\n")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/gcal.updateeventprops"},"UpdateEventProps")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("b",null,"Returns:"),(0,r.kt)("p",null,"Promise","<",(0,r.kt)("a",{parentName:"p",href:"/docs/api/gcal.updateeventresponse"},"UpdateEventResponse"),">"),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Update event"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { GoogleCalendar } from "@runlightyear/gcal";\n\nfunction addHours(date: Date, hours: number) {\n  return new Date(date.getTime() + hours * 60 * 60 * 1000);\n}\n\ndefineAction({\n  name: "updateEvent",\n  title: "Update Event",\n  apps: ["gcal"],\n  variables: ["calendarId?", "eventId", "summary"],\n  run: async ({ auths, variables }) => {\n    const gcal = new GoogleCalendar({\n      auth: auths.gcal,\n    });\n\n    const response = await gcal.updateEvent({\n      calendarId: variables.calendarId || "primary",\n      eventId: variables.eventId!,\n      event: {\n        summary: variables.summary!,\n        start: {\n          dateTime: addHours(new Date(), 2).toISOString(),\n        },\n        end: {\n          dateTime: addHours(new Date(), 3).toISOString(),\n        },\n      },\n    });\n\n    console.log("Response: ", response.data);\n  },\n});\n')))}u.isMDXComponent=!0}}]);