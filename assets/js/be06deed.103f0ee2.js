"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[54135],{57522:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var a=t(29901);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),k=r,u=d["".concat(i,".").concat(k)]||d[k]||m[k]||l;return t?a.createElement(u,s(s({ref:n},c),{},{components:t})):a.createElement(u,s({ref:n},c))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=d;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<l;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80347:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(14090),r=(t(29901),t(57522));const l={},s=void 0,o={unversionedId:"api/slack.slack",id:"api/slack.slack",title:"slack.slack",description:"Home &gt; @runlightyear/slack &gt; Slack",source:"@site/docs/api/slack.slack.md",sourceDirName:"api",slug:"/api/slack.slack",permalink:"/docs/api/slack.slack",draft:!1,tags:[],version:"current",frontMatter:{}},i={},p=[{value:"Slack class",id:"slack-class",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2},{value:"Example 6",id:"example-6",level:2},{value:"Example 7",id:"example-7",level:2},{value:"Example 8",id:"example-8",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Chat Methods",id:"chat-methods",level:2},{value:"Conversations Methods",id:"conversations-methods",level:2},{value:"Users Methods",id:"users-methods",level:2}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/slack"},"@runlightyear/slack")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/slack.slack"},"Slack")),(0,r.kt)("h2",{id:"slack-class"},"Slack class"),(0,r.kt)("p",null,"Connector to the Slack API"),(0,r.kt)("b",null,"Signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"declare class Slack extends RestConnector \n")),(0,r.kt)("p",null,"Extends: "),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api/lightyear.restconnector"},"RestConnector")),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("p",null,"Post text message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "postMessage",\n  title: "Post Message",\n  apps: ["slack"],\n  variables: [\n    {\n      name: "channel",\n      description:\n        "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.",\n    },\n    {\n      name: "text",\n      description: "The formatted text of the message to be published.",\n    },\n  ],\n  run: async ({ auths, variables }) => {\n    const slack = new Slack({\n      auth: auths.slack,\n    });\n    const response = await slack.postMessage({\n      channel: variables.channel!,\n      text: variables.text!,\n    });\n    console.log("Response data: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("p",null,"Post message with blocks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "postMessageWithBlocks",\n  title: "Post Message With Blocks",\n  apps: ["slack"],\n  variables: [\n    {\n      name: "channel",\n      description:\n        "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.",\n    },\n  ],\n  run: async ({ auths, variables }) => {\n    const slack = new Slack({ auth: auths.slack });\n\n    const response = await slack.postMessage({\n      channel: variables.channel!,\n      blocks: [\n        {\n          type: "header",\n          text: {\n            type: "plain_text",\n            text: "The header of the message",\n          },\n        },\n        {\n          type: "section",\n          text: {\n            type: "mrkdwn",\n            text: "A message *with some bold text* and _some italicized text_.",\n          },\n        },\n        {\n          type: "divider",\n        },\n        {\n          type: "section",\n          fields: [\n            {\n              type: "mrkdwn",\n              text: "*Priority*\\nHigh",\n            },\n            {\n              type: "mrkdwn",\n              text: "*Assignee*\\nJohn",\n            },\n            {\n              type: "mrkdwn",\n              text: "*Labels*\\nBug",\n            },\n            {\n              type: "mrkdwn",\n              text: "*Milestone*\\nRelease 1.0",\n            },\n          ],\n        },\n      ],\n      text: "Text for screens where blocks are not supported.",\n    });\n\n    console.log("Response data: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-3"},"Example 3"),(0,r.kt)("p",null,"Schedule a message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { dayjsUtc, defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "scheduleMessage",\n  title: "Schedule Message",\n  apps: ["slack"],\n  variables: [\n    {\n      name: "channel",\n      description:\n        "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.",\n    },\n    {\n      name: "delay?",\n      description:\n        "Amount of time in seconds to delay sending message. Defaults to 60.",\n    },\n  ],\n  run: async ({ auths, variables }) => {\n    const slack = new Slack({\n      auth: auths.slack,\n    });\n\n    const delay = variables.delay ? parseInt(variables.delay) : 60;\n    const response = await slack.scheduleMessage({\n      channel: variables.channel!,\n      postAt: dayjsUtc().add(delay, "seconds").unix(),\n      text: `This message was delayed ${delay} seconds.`,\n    });\n\n    console.log("Response data: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-4"},"Example 4"),(0,r.kt)("p",null,"Create a new conversation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "createPublicChannel",\n  title: "Create Public Channel",\n  apps: ["slack"],\n  variables: [\n    {\n      name: "name",\n      description: "Name of the public channel to create",\n    },\n  ],\n  run: async ({ auths, variables }) => {\n    const slack = new Slack({\n      auth: auths.slack,\n    });\n    const response = await slack.createConversation({\n      name: variables.name!,\n      isPrivate: false,\n    });\n    console.log("Response data: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-5"},"Example 5"),(0,r.kt)("p",null,"Invite a user to a channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "inviteToChannel",\n  title: "Invite to Channel",\n  apps: ["slack"],\n  variables: [\n    {\n      name: "channel",\n      description: "ID of the channel to invite user to. Example: C1234567890",\n    },\n    {\n      name: "user",\n      description: "ID of the user to invite. Example: U3456789012",\n    },\n  ],\n  run: async ({ auths, variables }) => {\n    const slack = new Slack({\n      auth: auths.slack,\n    });\n    const response = await slack.inviteToConversation({\n      channel: variables.channel!,\n      users: [variables.user!],\n    });\n    console.log("Response data: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-6"},"Example 6"),(0,r.kt)("p",null,"List users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "listUsers",\n  title: "List Users",\n  apps: ["slack"],\n  run: async ({ auths }) => {\n    const slack = new Slack({\n      auth: auths.slack,\n    });\n    const response = await slack.listUsers();\n    console.log("Response data: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-7"},"Example 7"),(0,r.kt)("p",null,"Get user info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "getUser",\n  title: "Get User",\n  apps: ["slack"],\n  variables: [\n    {\n      name: "user",\n      description: "User to get info on. Example: W1234567890",\n    },\n  ],\n  run: async ({ auths, variables }) => {\n    const slack = new Slack({\n      auth: auths.slack,\n    });\n    const response = await slack.getUser({\n      user: variables.user!,\n    });\n    console.log("Response data: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-8"},"Example 8"),(0,r.kt)("p",null,"Lookup user by email"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Slack } from "@runlightyear/slack";\n\ndefineAction({\n  name: "lookupUserByEmail",\n  title: "Lookup User By Email",\n  apps: ["slack"],\n  variables: [\n    {\n      name: "email",\n      description: "Email address of user to look up",\n    },\n  ],\n  run: async ({ auths, variables }) => {\n    const slack = new Slack({\n      auth: auths.slack,\n    });\n    const response = await slack.lookupUserByEmail({\n      email: variables.email!,\n    });\n    console.log("Response data: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Constructor"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack._constructor_"},"(constructor)(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Create a new slack connector")))),(0,r.kt)("h2",{id:"chat-methods"},"Chat Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.postmessage"},"postMessage(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Sends a message to a channel")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.schedulemessage"},"scheduleMessage(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Schedules a message to be sent to a channel.")))),(0,r.kt)("h2",{id:"conversations-methods"},"Conversations Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.createconversation"},"createConversation(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Initiates a public or private channel-based conversation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.invitetoconversation"},"inviteToConversation(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Invites users to a channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.joinconversation"},"joinConversation(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Join an existing conversation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.kickfromconversation"},"kickFromConversation(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Kick a user from a conversation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.leaveconversation"},"leaveConversation(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Leave a conversation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.listconversations"},"listConversations(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"List conversations")))),(0,r.kt)("h2",{id:"users-methods"},"Users Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.getuser"},"getUser(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Gets information about a user.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.listusers"},"listUsers(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"List users")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/slack.slack.lookupuserbyemail"},"lookupUserByEmail(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Find a user with an email address.")))))}m.isMDXComponent=!0}}]);