"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[90156],{36535:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=t(42664),r=(t(67308),t(62757));const o={},l=void 0,i={unversionedId:"api/notion.notion",id:"api/notion.notion",title:"notion.notion",description:"Home &gt; @runlightyear/notion &gt; Notion",source:"@site/docs/api/notion.notion.md",sourceDirName:"api",slug:"/api/notion.notion",permalink:"/docs/api/notion.notion",draft:!1,tags:[],version:"current",frontMatter:{}},p={},s=[{value:"Notion class",id:"notion-class",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2},{value:"Example 6",id:"example-6",level:2},{value:"Example 7",id:"example-7",level:2},{value:"Example 8",id:"example-8",level:2},{value:"Example 9",id:"example-9",level:2},{value:"Example 10",id:"example-10",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Blocks Methods",id:"blocks-methods",level:2},{value:"Databases Methods",id:"databases-methods",level:2},{value:"Listeners Methods",id:"listeners-methods",level:2},{value:"Pages Methods",id:"pages-methods",level:2},{value:"Other Methods",id:"other-methods",level:2}],g={toc:s},d="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,r.yg)("a",{parentName:"p",href:"/docs/api/notion"},"@runlightyear/notion")," ",">"," ",(0,r.yg)("a",{parentName:"p",href:"/docs/api/notion.notion"},"Notion")),(0,r.yg)("h2",{id:"notion-class"},"Notion class"),(0,r.yg)("p",null,"Connector to the Notion API"),(0,r.yg)("b",null,"Signature:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"declare class Notion extends RestConnector \n")),(0,r.yg)("p",null,"Extends: "),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/api/lightyear.restconnector"},"RestConnector")),(0,r.yg)("h2",{id:"example-1"},"Example 1"),(0,r.yg)("p",null,"Create a database"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "createDatabase",\n  title: "Create Database",\n  apps: ["notion"],\n  variables: ["parentPageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.createDatabase({\n      parent: {\n        pageId: variables.parentPageId!,\n      },\n      title: [\n        {\n          text: {\n            content: "Grocery List",\n          },\n        },\n      ],\n      properties: {\n        Name: {\n          title: {},\n        },\n        Description: {\n          richText: {},\n        },\n        "In Stock": {\n          checkbox: {},\n        },\n        "Food Group": {\n          select: {\n            options: [\n              {\n                name: "\ud83e\udd66 Vegetable",\n                color: "green",\n              },\n              {\n                name: "\ud83c\udf4e Fruit",\n                color: "red",\n              },\n              {\n                name: "\ud83c\udf5e Carbs",\n                color: "yellow",\n              },\n            ],\n          },\n        },\n        Price: {\n          number: {\n            format: "dollar",\n          },\n        },\n        "Last Ordered": {\n          date: {},\n        },\n        "Store Availability": {\n          multiSelect: {\n            options: [\n              {\n                name: "Duc Loi Market",\n                color: "blue",\n              },\n              {\n                name: "Rainbow Grocery",\n                color: "gray",\n              },\n              {\n                name: "Nijiya Market",\n                color: "purple",\n              },\n              {\n                name: "Gus\'s Community Market",\n                color: "yellow",\n              },\n            ],\n          },\n        },\n        "+1": {\n          people: {},\n        },\n        Photo: {\n          files: {},\n        },\n      },\n    });\n    console.log("Database: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-2"},"Example 2"),(0,r.yg)("p",null,"Create a database with items"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "createDatabaseItems",\n  title: "Create Database Items",\n  apps: ["notion"],\n  variables: ["parentPageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n    const response = await notion.createDatabase({\n      parent: {\n        pageId: variables.parentPageId!,\n      },\n      title: [\n        {\n          text: {\n            content: "Shopping List",\n          },\n        },\n      ],\n      properties: {\n        Name: {\n          title: {},\n        },\n        Description: {\n          richText: {},\n        },\n        Quantity: {\n          number: {\n            format: "number",\n          },\n        },\n      },\n    });\n\n    const newDatabaseId = response.data.id;\n\n    await notion.createPage({\n      parent: {\n        databaseId: newDatabaseId,\n      },\n      properties: {\n        Name: {\n          title: [\n            {\n              text: {\n                content: "\ud83e\udd66 Broccoli",\n              },\n            },\n          ],\n        },\n        Description: {\n          richText: [\n            {\n              text: {\n                content: "A green vegetable",\n              },\n            },\n          ],\n        },\n        Quantity: {\n          number: 1,\n        },\n      },\n    });\n\n    await notion.createPage({\n      parent: {\n        databaseId: newDatabaseId,\n      },\n      properties: {\n        Name: {\n          title: [\n            {\n              text: {\n                content: "\ud83c\udf4e Apple",\n              },\n            },\n          ],\n        },\n        Description: {\n          richText: [\n            {\n              text: {\n                content: "A red fruit",\n              },\n            },\n          ],\n        },\n        Quantity: {\n          number: 2,\n        },\n      },\n    });\n\n    await notion.createPage({\n      parent: {\n        databaseId: newDatabaseId,\n      },\n      properties: {\n        Name: {\n          title: [\n            {\n              text: {\n                content: "\ud83c\udf5e Bread",\n              },\n            },\n          ],\n        },\n        Description: {\n          richText: [\n            {\n              text: {\n                content: "A yellow carb",\n              },\n            },\n          ],\n        },\n        Quantity: {\n          number: 3,\n        },\n      },\n    });\n  },\n});\n')),(0,r.yg)("h2",{id:"example-3"},"Example 3"),(0,r.yg)("p",null,"Query a database"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "queryDatabase",\n  title: "Query Database",\n  apps: ["notion"],\n  variables: ["databaseId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.queryDatabase({\n      databaseId: variables.databaseId!,\n    });\n    console.log("Query result: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-4"},"Example 4"),(0,r.yg)("p",null,"Query a database with filter"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "queryDatabaseWithFilter",\n  title: "Query Database With Filter",\n  apps: ["notion"],\n  variables: ["databaseId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.queryDatabase({\n      databaseId: variables.databaseId!,\n      filter: {\n        property: "Name",\n        richText: {\n          isNotEmpty: true,\n        },\n      },\n    });\n    console.log("Result: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-5"},"Example 5"),(0,r.yg)("p",null,"Update a database item"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "updateDatabaseItem",\n  title: "Update Database Item",\n  apps: ["notion"],\n  variables: ["databaseItemId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n    const response = await notion.updatePageProperties({\n      pageId: variables.databaseItemId!,\n      properties: {\n        Name: {\n          title: [\n            {\n              text: {\n                content: "Updated name",\n              },\n            },\n          ],\n        },\n      },\n    });\n    console.log("Updated database item:", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-6"},"Example 6"),(0,r.yg)("p",null,"Retrieve a database"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "retrieveDatabase",\n  title: "Retrieve Database",\n  apps: ["notion"],\n  variables: ["databaseId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.retrieveDatabase({\n      databaseId: variables.databaseId!,\n    });\n    console.log("Result: ", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-7"},"Example 7"),(0,r.yg)("p",null,"Create a page"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "createPage",\n  title: "Create Page",\n  apps: ["notion"],\n  variables: ["existingPageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n\n    const response = await notion.createPage({\n      parent: {\n        pageId: variables.existingPageId!,\n      },\n      properties: {\n        title: {\n          title: [\n            {\n              text: {\n                content: "Hello World",\n              },\n            },\n          ],\n        },\n      },\n    });\n    console.log("Created page", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-8"},"Example 8"),(0,r.yg)("p",null,"Create a page with children"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "createPageWithChildren",\n  title: "Create Page With Children",\n  apps: ["notion"],\n  variables: ["existingPageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n\n    const response = await notion.createPage({\n      parent: {\n        pageId: variables.existingPageId!,\n      },\n      properties: {\n        title: {\n          title: [\n            {\n              text: {\n                content: "Hello World, I have children!",\n              },\n            },\n          ],\n        },\n      },\n      children: [\n        {\n          heading2: {\n            richText: [\n              {\n                text: {\n                  content: "This is a heading",\n                },\n              },\n            ],\n          },\n        },\n        {\n          paragraph: {\n            richText: [\n              {\n                text: {\n                  content: "This is a paragraph I just wrote",\n                },\n              },\n            ],\n          },\n        },\n      ],\n    });\n    console.log("Created page", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-9"},"Example 9"),(0,r.yg)("p",null,"Retrieve a page"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "retrievePage",\n  title: "Retrieve Page",\n  apps: ["notion"],\n  variables: ["pageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n    const response = await notion.retrievePage({\n      pageId: variables.pageId!,\n    });\n    console.log("Page:", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"example-10"},"Example 10"),(0,r.yg)("p",null,"Retrieve a block's children"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "retrieveBlockChildren",\n  title: "Retrieve Block Children",\n  apps: ["notion"],\n  variables: ["blockId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.retrieveBlockChildren({\n      blockId: variables.blockId!,\n    });\n    console.log("Block children:", response.data);\n  },\n});\n')),(0,r.yg)("h2",{id:"constructors"},"Constructors"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Constructor"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion._constructor_"},"(constructor)(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Constructs a new instance of the ",(0,r.yg)("code",null,"Notion")," class")))),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.authtype"},"authType")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("code",null,"static")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/lightyear.authtype"},"AuthType")),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.oauth"},"OAuth")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("code",null,"static")),(0,r.yg)("td",{parentName:"tr",align:null},"typeof ",(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notionoauth"},"NotionOAuth")),(0,r.yg)("td",{parentName:"tr",align:null})))),(0,r.yg)("h2",{id:"blocks-methods"},"Blocks Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.retrieveblockchildren"},"retrieveBlockChildren(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Retrieve block children")))),(0,r.yg)("h2",{id:"databases-methods"},"Databases Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.createdatabase"},"createDatabase(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Create a database")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.querydatabase"},"queryDatabase(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Query a database")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.retrievedatabase"},"retrieveDatabase(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Retrieve a database")))),(0,r.yg)("h2",{id:"listeners-methods"},"Listeners Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.onnewdatabaseitems"},"onNewDatabaseItems(props)")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("code",null,"static")),(0,r.yg)("td",{parentName:"tr",align:null},"On New Database Items")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.onupdateddatabaseitems"},"onUpdatedDatabaseItems(props)")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("code",null,"static")),(0,r.yg)("td",{parentName:"tr",align:null},"On Updated Database Items")))),(0,r.yg)("h2",{id:"pages-methods"},"Pages Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.createpage"},"createPage(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Create a page")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.retrievepage"},"retrievePage(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Retrieve a page")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.updatepageproperties"},"updatePageProperties(props)")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Update page properties")))),(0,r.yg)("h2",{id:"other-methods"},"Other Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.getbaseurl"},"getBaseUrl()")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"/docs/api/notion.notion.getdefaultheaders"},"getDefaultHeaders()")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null})))))}y.isMDXComponent=!0},62757:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>c});var a=t(67308);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},g=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,c=d["".concat(p,".").concat(m)]||d[m]||y[m]||o;return t?a.createElement(c,l(l({ref:n},g),{},{components:t})):a.createElement(c,l({ref:n},g))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);