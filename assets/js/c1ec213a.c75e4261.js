"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5014],{57522:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>u});var a=n(29901);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,p=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),c=s(n),u=r,h=c["".concat(p,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(h,l(l({ref:e},d),{},{components:n})):a.createElement(h,l({ref:e},d))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},74900:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(14090),r=(n(29901),n(57522));const o={},l=void 0,i={unversionedId:"api/notion.notion",id:"api/notion.notion",title:"notion.notion",description:"Home &gt; @runlightyear/notion &gt; Notion",source:"@site/docs/api/notion.notion.md",sourceDirName:"api",slug:"/api/notion.notion",permalink:"/docs/api/notion.notion",draft:!1,tags:[],version:"current",frontMatter:{}},p={},s=[{value:"Notion class",id:"notion-class",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2},{value:"Example 6",id:"example-6",level:2},{value:"Example 7",id:"example-7",level:2},{value:"Example 8",id:"example-8",level:2},{value:"Example 9",id:"example-9",level:2},{value:"Example 10",id:"example-10",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Properties",id:"properties",level:2},{value:"Blocks Methods",id:"blocks-methods",level:2},{value:"Databases Methods",id:"databases-methods",level:2},{value:"Listeners Methods",id:"listeners-methods",level:2},{value:"Pages Methods",id:"pages-methods",level:2},{value:"Other Methods",id:"other-methods",level:2}],d={toc:s};function m(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api"},"Home")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/notion"},"@runlightyear/notion")," ",">"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/notion.notion"},"Notion")),(0,r.kt)("h2",{id:"notion-class"},"Notion class"),(0,r.kt)("p",null,"Connector to the Notion API"),(0,r.kt)("b",null,"Signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"declare class Notion extends RestConnector \n")),(0,r.kt)("p",null,"Extends: "),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api/lightyear.restconnector"},"RestConnector")),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("p",null,"Create a database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "createDatabase",\n  title: "Create Database",\n  apps: ["notion"],\n  variables: ["parentPageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.createDatabase({\n      parent: {\n        pageId: variables.parentPageId!,\n      },\n      title: [\n        {\n          text: {\n            content: "Grocery List",\n          },\n        },\n      ],\n      properties: {\n        Name: {\n          title: {},\n        },\n        Description: {\n          richText: {},\n        },\n        "In Stock": {\n          checkbox: {},\n        },\n        "Food Group": {\n          select: {\n            options: [\n              {\n                name: "\ud83e\udd66 Vegetable",\n                color: "green",\n              },\n              {\n                name: "\ud83c\udf4e Fruit",\n                color: "red",\n              },\n              {\n                name: "\ud83c\udf5e Carbs",\n                color: "yellow",\n              },\n            ],\n          },\n        },\n        Price: {\n          number: {\n            format: "dollar",\n          },\n        },\n        "Last Ordered": {\n          date: {},\n        },\n        "Store Availability": {\n          multiSelect: {\n            options: [\n              {\n                name: "Duc Loi Market",\n                color: "blue",\n              },\n              {\n                name: "Rainbow Grocery",\n                color: "gray",\n              },\n              {\n                name: "Nijiya Market",\n                color: "purple",\n              },\n              {\n                name: "Gus\'s Community Market",\n                color: "yellow",\n              },\n            ],\n          },\n        },\n        "+1": {\n          people: {},\n        },\n        Photo: {\n          files: {},\n        },\n      },\n    });\n    console.log("Database: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("p",null,"Create a database with items"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "createDatabaseItems",\n  title: "Create Database Items",\n  apps: ["notion"],\n  variables: ["parentPageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n    const response = await notion.createDatabase({\n      parent: {\n        pageId: variables.parentPageId!,\n      },\n      title: [\n        {\n          text: {\n            content: "Shopping List",\n          },\n        },\n      ],\n      properties: {\n        Name: {\n          title: {},\n        },\n        Description: {\n          richText: {},\n        },\n        Quantity: {\n          number: {\n            format: "number",\n          },\n        },\n      },\n    });\n\n    const newDatabaseId = response.data.id;\n\n    await notion.createPage({\n      parent: {\n        databaseId: newDatabaseId,\n      },\n      properties: {\n        Name: {\n          title: [\n            {\n              text: {\n                content: "\ud83e\udd66 Broccoli",\n              },\n            },\n          ],\n        },\n        Description: {\n          richText: [\n            {\n              text: {\n                content: "A green vegetable",\n              },\n            },\n          ],\n        },\n        Quantity: {\n          number: 1,\n        },\n      },\n    });\n\n    await notion.createPage({\n      parent: {\n        databaseId: newDatabaseId,\n      },\n      properties: {\n        Name: {\n          title: [\n            {\n              text: {\n                content: "\ud83c\udf4e Apple",\n              },\n            },\n          ],\n        },\n        Description: {\n          richText: [\n            {\n              text: {\n                content: "A red fruit",\n              },\n            },\n          ],\n        },\n        Quantity: {\n          number: 2,\n        },\n      },\n    });\n\n    await notion.createPage({\n      parent: {\n        databaseId: newDatabaseId,\n      },\n      properties: {\n        Name: {\n          title: [\n            {\n              text: {\n                content: "\ud83c\udf5e Bread",\n              },\n            },\n          ],\n        },\n        Description: {\n          richText: [\n            {\n              text: {\n                content: "A yellow carb",\n              },\n            },\n          ],\n        },\n        Quantity: {\n          number: 3,\n        },\n      },\n    });\n  },\n});\n')),(0,r.kt)("h2",{id:"example-3"},"Example 3"),(0,r.kt)("p",null,"Query a database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "queryDatabase",\n  title: "Query Database",\n  apps: ["notion"],\n  variables: ["databaseId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.queryDatabase({\n      databaseId: variables.databaseId!,\n    });\n    console.log("Query result: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-4"},"Example 4"),(0,r.kt)("p",null,"Query a database with filter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "queryDatabaseWithFilter",\n  title: "Query Database With Filter",\n  apps: ["notion"],\n  variables: ["databaseId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.queryDatabase({\n      databaseId: variables.databaseId!,\n      filter: {\n        property: "Name",\n        richText: {\n          isNotEmpty: true,\n        },\n      },\n    });\n    console.log("Result: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-5"},"Example 5"),(0,r.kt)("p",null,"Update a database item"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "updateDatabaseItem",\n  title: "Update Database Item",\n  apps: ["notion"],\n  variables: ["databaseItemId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n    const response = await notion.updatePageProperties({\n      pageId: variables.databaseItemId!,\n      properties: {\n        Name: {\n          title: [\n            {\n              text: {\n                content: "Updated name",\n              },\n            },\n          ],\n        },\n      },\n    });\n    console.log("Updated database item:", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-6"},"Example 6"),(0,r.kt)("p",null,"Retrieve a database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "retrieveDatabase",\n  title: "Retrieve Database",\n  apps: ["notion"],\n  variables: ["databaseId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.retrieveDatabase({\n      databaseId: variables.databaseId!,\n    });\n    console.log("Result: ", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-7"},"Example 7"),(0,r.kt)("p",null,"Create a page"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "createPage",\n  title: "Create Page",\n  apps: ["notion"],\n  variables: ["existingPageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n\n    const response = await notion.createPage({\n      parent: {\n        pageId: variables.existingPageId!,\n      },\n      properties: {\n        title: {\n          title: [\n            {\n              text: {\n                content: "Hello World",\n              },\n            },\n          ],\n        },\n      },\n    });\n    console.log("Created page", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-8"},"Example 8"),(0,r.kt)("p",null,"Create a page with children"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "createPageWithChildren",\n  title: "Create Page With Children",\n  apps: ["notion"],\n  variables: ["existingPageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n\n    const response = await notion.createPage({\n      parent: {\n        pageId: variables.existingPageId!,\n      },\n      properties: {\n        title: {\n          title: [\n            {\n              text: {\n                content: "Hello World, I have children!",\n              },\n            },\n          ],\n        },\n      },\n      children: [\n        {\n          heading2: {\n            richText: [\n              {\n                text: {\n                  content: "This is a heading",\n                },\n              },\n            ],\n          },\n        },\n        {\n          paragraph: {\n            richText: [\n              {\n                text: {\n                  content: "This is a paragraph I just wrote",\n                },\n              },\n            ],\n          },\n        },\n      ],\n    });\n    console.log("Created page", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-9"},"Example 9"),(0,r.kt)("p",null,"Retrieve a page"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "retrievePage",\n  title: "Retrieve Page",\n  apps: ["notion"],\n  variables: ["pageId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({ auth: auths.notion });\n    const response = await notion.retrievePage({\n      pageId: variables.pageId!,\n    });\n    console.log("Page:", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"example-10"},"Example 10"),(0,r.kt)("p",null,"Retrieve a block's children"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { defineAction } from "@runlightyear/lightyear";\nimport { Notion } from "@runlightyear/notion";\n\ndefineAction({\n  name: "retrieveBlockChildren",\n  title: "Retrieve Block Children",\n  apps: ["notion"],\n  variables: ["blockId"],\n  run: async ({ auths, variables }) => {\n    const notion = new Notion({\n      auth: auths.notion,\n    });\n    const response = await notion.retrieveBlockChildren({\n      blockId: variables.blockId!,\n    });\n    console.log("Block children:", response.data);\n  },\n});\n')),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Constructor"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion._constructor_"},"(constructor)(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Constructs a new instance of the ",(0,r.kt)("code",null,"Notion")," class")))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.authtype"},"authType")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"static")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/lightyear.authtype"},"AuthType")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.oauth"},"OAuth")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"static")),(0,r.kt)("td",{parentName:"tr",align:null},"typeof ",(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notionoauth"},"NotionOAuth")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"blocks-methods"},"Blocks Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.retrieveblockchildren"},"retrieveBlockChildren(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Retrieve block children")))),(0,r.kt)("h2",{id:"databases-methods"},"Databases Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.createdatabase"},"createDatabase(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Create a database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.querydatabase"},"queryDatabase(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Query a database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.retrievedatabase"},"retrieveDatabase(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Retrieve a database")))),(0,r.kt)("h2",{id:"listeners-methods"},"Listeners Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.onnewdatabaseitems"},"onNewDatabaseItems(props)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"static")),(0,r.kt)("td",{parentName:"tr",align:null},"On New Database Items")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.onupdateddatabaseitems"},"onUpdatedDatabaseItems(props)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("code",null,"static")),(0,r.kt)("td",{parentName:"tr",align:null},"On Updated Database Items")))),(0,r.kt)("h2",{id:"pages-methods"},"Pages Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.createpage"},"createPage(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Create a page")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.retrievepage"},"retrievePage(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Retrieve a page")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.updatepageproperties"},"updatePageProperties(props)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Update page properties")))),(0,r.kt)("h2",{id:"other-methods"},"Other Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Modifiers"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.getbaseurl"},"getBaseUrl()")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api/notion.notion.getdefaultheaders"},"getDefaultHeaders()")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))))}m.isMDXComponent=!0}}]);