export interface WebhookSpecification {
  options: {
    /**
     * A webhook specification can contain a filters object.
     */
    filters?: WebhookFilters;
    /**
     * By default, the payloads only contain the data that changed. In order to generate payloads with more contextual data, an includes object may be added.
     */
    includes?: WebhookIncludes;
  };
}

export interface WebhookFilters {
  /**
   * Only generate payloads for changes in the specified TableId or ViewId.
   */
  recordChangeScope?: string;
  /**
   * Only generate payloads that contain changes affecting objects of these types.
   */
  dataTypes: Array<"tableData" | "tableFields" | "tableMetadata">;
  /**
   * Only generate payloads that contain changes of these types.
   */
  changeTypes?: Array<"add" | "remove" | "update">;
  /**
   * Only generate payloads for changes from these sources. If omitted, changes from all sources are reported.
   */
  fromSources?: Array<
    /**
     * changes generated by a user through the web or mobile clients
     */
    | "client"
    /**
     * changes generated through the Airtable API
     */
    | "publicApi"
    /**
     * changes generated when a form is submitted
     */
    | "formSubmission"
    /**
     * changes generated through an automation action
     */
    | "automation"
    /**
     * changes generated by system events, such as processing time function formulas
     */
    | "system"
    /**
     * changes generated through Airtable Sync
     */
    | "sync"
    /**
     * changes generated by anonymous users
     */
    | "anonymousUser"
    /**
     * changes generated by unknown sources
     */
    | "unknown"
  >;
  /**
   * Additional options for source filtering. This allows users to filter form submissions by ViewId.
   */
  sourceOptions?: {
    formSubmission?: {
      viewId: string;
    };
  };
  /**
   * Only generate payloads for changes that modify values in cells in these fields. If omitted, all fields within the table/view/base are watched.
   */
  watchDataInFieldIds?: Array<string>;
  /**
   * Only generate payloads for changes that modify the schemas of these fields. If omitted, schemas of all fields within the table/view/base are watched.
   */
  watchSchemasOfFieldIds?: Array<string>;
}

export interface WebhookIncludes {
  /**
   * A list of fields to include in the payload regardless of whether or not they changed.
   */
  includeCellValuesInFieldIds?: Array<string | "all">;
  /**
   * If true, include the previous cell value in the payload.
   */
  includePreviousCellValues?: boolean;
  /**
   * If true, include the previous field definition in the payload.
   */
  includePreviousFieldDefinitions?: boolean;
}
